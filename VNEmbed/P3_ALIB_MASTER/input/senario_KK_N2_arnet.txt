alib.scenariogeneration.ScenarioParameterContainer @ 0x187077fa8b0

 scenario_index_offset: 0

 scenario_list:
  [<alib.datamodel.Scenario object at 0x00000187077FAA90>, <alib.datamodel.Scenario object at 0x00000187077FAD90>]
  alib.datamodel.Scenario @ 0x187077faa90
   name: scenario_0.0_rep_0
   objective: 0
   requests:
    [<alib.datamodel.Request object at 0x00000187077FAAF0>, <alib.datamodel.Request object at 0x00000187077FAB80>, <alib.datamodel.Request object at 0x00000187077FAA00>, <alib.datamodel.Request object at 0x00000187077FAB50>]
    alib.datamodel.Request @ 0x187077faaf0
     _shortest_paths_attribute_identifier: cost
     edge:
      ('2', '1'):
       demand: 0.051539068513570936
       allowed_edges: None
      ('1', '2'):
       demand: 0.051539068513570936
       allowed_edges: None
      ('1', '3'):
       demand: 0.051539068513570936
       allowed_edges: None
      ('3', '2'):
       demand: 0.051539068513570936
       allowed_edges: None
      ('3', '1'):
       demand: 0.051539068513570936
       allowed_edges: None
     edges:
      {('3', '2'), ('3', '1'), ('1', '3'), ('1', '2'), ('2', '1')}
       ('3', '2')
       ('3', '1')
       ('1', '3')
       ('1', '2')
       ('2', '1')
     graph:
       empty dict
     in_edges:
      1:
       [('2', '1'), ('3', '1')]
        ('2', '1')
        ('3', '1')
      2:
       [('1', '2'), ('3', '2')]
        ('1', '2')
        ('3', '2')
      3:
       [('1', '3')]
     in_neighbors:
      1:
       ['2', '3']
      2:
       ['1', '3']
      3:
       ['1']
     name: vnet_1
     node:
      1:
       demand: 0.3543310960308002
       allowed_nodes:
        ['5', '1']
       type: t1
      2:
       demand: 0.3543310960308002
       allowed_nodes:
        ['5', '1']
       type: t1
      3:
       demand: 0.3543310960308002
       allowed_nodes:
        ['5', '1']
       type: t1
     nodes:
      {'1', '3', '2'}
     out_edges:
      1:
       [('1', '2'), ('1', '3')]
        ('1', '2')
        ('1', '3')
      2:
       [('2', '1')]
      3:
       [('3', '2'), ('3', '1')]
        ('3', '2')
        ('3', '1')
     out_neighbors:
      1:
       ['2', '3']
      2:
       ['1']
      3:
       ['2', '1']
     profit: 0.0
     shortest_paths_costs: None
     types:
      {'t1'}
    alib.datamodel.Request @ 0x187077fab80
     _shortest_paths_attribute_identifier: cost
     edge:
       empty dict
     edges:
      set()
     graph:
       empty dict
     in_edges:
      1:
       []
      2:
       []
     in_neighbors:
      1:
       []
      2:
       []
     name: vnet_2
     node:
      1:
       demand: 1.6219147980755437
       allowed_nodes:
        ['5', '1']
       type: t1
      2:
       demand: 1.6219147980755437
       allowed_nodes:
        ['5', '1']
       type: t1
     nodes:
      {'1', '2'}
     out_edges:
      1:
       []
      2:
       []
     out_neighbors:
      1:
       []
      2:
       []
     profit: 0.0
     shortest_paths_costs: None
     types:
      {'t1'}
    alib.datamodel.Request @ 0x187077faa00
     _shortest_paths_attribute_identifier: cost
     edge:
      ('2', '3'):
       demand: 0.13958038696515526
       allowed_edges: None
      ('1', '2'):
       demand: 0.13958038696515526
       allowed_edges: None
      ('1', '3'):
       demand: 0.13958038696515526
       allowed_edges: None
      ('3', '2'):
       demand: 0.13958038696515526
       allowed_edges: None
      ('3', '1'):
       demand: 0.13958038696515526
       allowed_edges: None
     edges:
      {('3', '2'), ('2', '3'), ('3', '1'), ('1', '3'), ('1', '2')}
       ('3', '2')
       ('2', '3')
       ('3', '1')
       ('1', '3')
       ('1', '2')
     graph:
       empty dict
     in_edges:
      1:
       [('3', '1')]
      2:
       [('1', '2'), ('3', '2')]
        ('1', '2')
        ('3', '2')
      3:
       [('2', '3'), ('1', '3')]
        ('2', '3')
        ('1', '3')
     in_neighbors:
      1:
       ['3']
      2:
       ['1', '3']
      3:
       ['2', '1']
     name: vnet_3
     node:
      1:
       demand: 0.9596151603854427
       allowed_nodes:
        ['5', '1']
       type: t1
      2:
       demand: 0.9596151603854427
       allowed_nodes:
        ['5', '1']
       type: t1
      3:
       demand: 0.9596151603854427
       allowed_nodes:
        ['5', '1']
       type: t1
     nodes:
      {'1', '3', '2'}
     out_edges:
      1:
       [('1', '2'), ('1', '3')]
        ('1', '2')
        ('1', '3')
      2:
       [('2', '3')]
      3:
       [('3', '2'), ('3', '1')]
        ('3', '2')
        ('3', '1')
     out_neighbors:
      1:
       ['2', '3']
      2:
       ['3']
      3:
       ['2', '1']
     profit: 0.0
     shortest_paths_costs: None
     types:
      {'t1'}
    alib.datamodel.Request @ 0x187077fab50
     _shortest_paths_attribute_identifier: cost
     edge:
      ('1', '2'):
       demand: 0.37303914532368304
       allowed_edges: None
     edges:
      {('1', '2')}
       ('1', '2')
     graph:
       empty dict
     in_edges:
      1:
       []
      2:
       [('1', '2')]
     in_neighbors:
      1:
       []
      2:
       ['1']
     name: vnet_4
     node:
      1:
       demand: 2.564644124100321
       allowed_nodes:
        ['5', '1']
       type: t1
      2:
       demand: 2.564644124100321
       allowed_nodes:
        ['5', '1']
       type: t1
     nodes:
      {'1', '2'}
     out_edges:
      1:
       [('1', '2')]
      2:
       []
     out_neighbors:
      1:
       ['2']
      2:
       []
     profit: 0.0
     shortest_paths_costs: None
     types:
      {'t1'}
   substrate: Substrate KK_Aarnet with following attributes: 
		Nodes{'4', '0', '5', '3', '1', '6', '2'}
		Edges{('4', '3'), ('4', '2'), ('0', '3'), ('0', '1'), ('2', '4'), ('3', '1'), ('5', '4'), ('6', '5'), ('1', '3'), ('3', '0'), ('4', '5'), ('2', '0'), ('5', '6'), ('0', '2'), ('1', '0'), ('3', '4')}
  alib.datamodel.Scenario @ 0x187077fad90
   name: scenario_1.0_rep_0
   objective: 0
   requests:
    [<alib.datamodel.Request object at 0x00000187077FADC0>, <alib.datamodel.Request object at 0x00000187077FACD0>, <alib.datamodel.Request object at 0x00000187077FAD30>, <alib.datamodel.Request object at 0x00000187077FAD60>]
    alib.datamodel.Request @ 0x187077fadc0
     _shortest_paths_attribute_identifier: cost
     edge:
      ('2', '1'):
       demand: 0.3670346122615578
       allowed_edges: None
      ('2', '3'):
       demand: 0.3670346122615578
       allowed_edges: None
      ('1', '3'):
       demand: 0.3670346122615578
       allowed_edges: None
      ('3', '2'):
       demand: 0.3670346122615578
       allowed_edges: None
      ('3', '1'):
       demand: 0.3670346122615578
       allowed_edges: None
     edges:
      {('3', '2'), ('2', '3'), ('3', '1'), ('1', '3'), ('2', '1')}
       ('3', '2')
       ('2', '3')
       ('3', '1')
       ('1', '3')
       ('2', '1')
     graph:
       empty dict
     in_edges:
      1:
       [('2', '1'), ('3', '1')]
        ('2', '1')
        ('3', '1')
      2:
       [('3', '2')]
      3:
       [('2', '3'), ('1', '3')]
        ('2', '3')
        ('1', '3')
     in_neighbors:
      1:
       ['2', '3']
      2:
       ['3']
      3:
       ['2', '1']
     name: vnet_1
     node:
      1:
       demand: 2.5233629592982103
       allowed_nodes:
        ['6', '0']
       type: t2
      2:
       demand: 2.5233629592982103
       allowed_nodes:
        ['6', '0']
       type: t2
      3:
       demand: 2.5233629592982103
       allowed_nodes:
        ['6', '0']
       type: t2
     nodes:
      {'1', '3', '2'}
     out_edges:
      1:
       [('1', '3')]
      2:
       [('2', '1'), ('2', '3')]
        ('2', '1')
        ('2', '3')
      3:
       [('3', '2'), ('3', '1')]
        ('3', '2')
        ('3', '1')
     out_neighbors:
      1:
       ['3']
      2:
       ['1', '3']
      3:
       ['2', '1']
     profit: 0.0
     shortest_paths_costs: None
     types:
      {'t2'}
    alib.datamodel.Request @ 0x187077facd0
     _shortest_paths_attribute_identifier: cost
     edge:
      ('2', '1'):
       demand: 0.0771560195208718
       allowed_edges: None
     edges:
      {('2', '1')}
       ('2', '1')
     graph:
       empty dict
     in_edges:
      1:
       [('2', '1')]
      2:
       []
     in_neighbors:
      1:
       ['2']
      2:
       []
     name: vnet_2
     node:
      1:
       demand: 0.5304476342059936
       allowed_nodes:
        ['6', '0']
       type: t2
      2:
       demand: 0.5304476342059936
       allowed_nodes:
        ['6', '0']
       type: t2
     nodes:
      {'1', '2'}
     out_edges:
      1:
       []
      2:
       [('2', '1')]
     out_neighbors:
      1:
       []
      2:
       ['1']
     profit: 0.0
     shortest_paths_costs: None
     types:
      {'t2'}
    alib.datamodel.Request @ 0x187077fad30
     _shortest_paths_attribute_identifier: cost
     edge:
      ('2', '4'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('2', '1'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('2', '3'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('4', '2'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('4', '1'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('4', '3'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('1', '2'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('1', '4'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('1', '3'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('3', '4'):
       demand: 0.07844977664530797
       allowed_edges: None
      ('3', '1'):
       demand: 0.07844977664530797
       allowed_edges: None
     edges:
      {('4', '3'), ('4', '2'), ('1', '4'), ('2', '3'), ('2', '4'), ('3', '1'), ('1', '3'), ('4', '1'), ('1', '2'), ('2', '1'), ('3', '4')}
       ('4', '3')
       ('4', '2')
       ('1', '4')
       ('2', '3')
       ('2', '4')
       ('3', '1')
       ('1', '3')
       ('4', '1')
       ('1', '2')
       ('2', '1')
       ('3', '4')
     graph:
       empty dict
     in_edges:
      1:
       [('2', '1'), ('4', '1'), ('3', '1')]
        ('2', '1')
        ('4', '1')
        ('3', '1')
      2:
       [('4', '2'), ('1', '2')]
        ('4', '2')
        ('1', '2')
      3:
       [('2', '3'), ('4', '3'), ('1', '3')]
        ('2', '3')
        ('4', '3')
        ('1', '3')
      4:
       [('2', '4'), ('1', '4'), ('3', '4')]
        ('2', '4')
        ('1', '4')
        ('3', '4')
     in_neighbors:
      1:
       ['2', '4', '3']
      2:
       ['4', '1']
      3:
       ['2', '4', '1']
      4:
       ['2', '1', '3']
     name: vnet_3
     node:
      1:
       demand: 0.5393422144364924
       allowed_nodes:
        ['6', '0']
       type: t2
      2:
       demand: 0.5393422144364924
       allowed_nodes:
        ['6', '0']
       type: t2
      3:
       demand: 0.5393422144364924
       allowed_nodes:
        ['6', '0']
       type: t2
      4:
       demand: 0.5393422144364924
       allowed_nodes:
        ['6', '0']
       type: t2
     nodes:
      {'4', '3', '1', '2'}
     out_edges:
      1:
       [('1', '2'), ('1', '4'), ('1', '3')]
        ('1', '2')
        ('1', '4')
        ('1', '3')
      2:
       [('2', '4'), ('2', '1'), ('2', '3')]
        ('2', '4')
        ('2', '1')
        ('2', '3')
      3:
       [('3', '4'), ('3', '1')]
        ('3', '4')
        ('3', '1')
      4:
       [('4', '2'), ('4', '1'), ('4', '3')]
        ('4', '2')
        ('4', '1')
        ('4', '3')
     out_neighbors:
      1:
       ['2', '4', '3']
      2:
       ['4', '1', '3']
      3:
       ['4', '1']
      4:
       ['2', '1', '3']
     profit: 0.0
     shortest_paths_costs: None
     types:
      {'t2'}
    alib.datamodel.Request @ 0x187077fad60
     _shortest_paths_attribute_identifier: cost
     edge:
      ('2', '1'):
       demand: 0.3924467608659478
       allowed_edges: None
      ('1', '2'):
       demand: 0.3924467608659478
       allowed_edges: None
     edges:
      {('2', '1'), ('1', '2')}
       ('2', '1')
       ('1', '2')
     graph:
       empty dict
     in_edges:
      1:
       [('2', '1')]
      2:
       [('1', '2')]
     in_neighbors:
      1:
       ['2']
      2:
       ['1']
     name: vnet_4
     node:
      1:
       demand: 2.698071480953392
       allowed_nodes:
        ['6', '0']
       type: t2
      2:
       demand: 2.698071480953392
       allowed_nodes:
        ['6', '0']
       type: t2
     nodes:
      {'1', '2'}
     out_edges:
      1:
       [('1', '2')]
      2:
       [('2', '1')]
     out_neighbors:
      1:
       ['2']
      2:
       ['1']
     profit: 0.0
     shortest_paths_costs: None
     types:
      {'t2'}
   substrate: Substrate KK_Aarnet with following attributes: 
		Nodes{'4', '0', '5', '3', '1', '6', '2'}
		Edges{('4', '3'), ('4', '2'), ('0', '3'), ('0', '1'), ('2', '4'), ('3', '1'), ('5', '4'), ('6', '5'), ('1', '3'), ('3', '0'), ('4', '5'), ('2', '0'), ('5', '6'), ('0', '2'), ('1', '0'), ('3', '4')}

 scenario_parameter_combination_list:
  [{'request_generation': {'exponential': {'ExponentialRequestGenerator': {'edge_resource_factor': 100, 'max_number_of_nodes': 4, 'min_number_of_nodes': 2, 'node_resource_factor': 0.1, 'normalize': False, 'number_of_requests': 4, 'probability': 0.8}}}, 'substrate_generation': {'substrates': {'TopologyZooReader': {'edge_capacity': 100.0, 'node_capacity': 100.0, 'node_cost_factor': 1.0, 'node_type_distribution': 0.3, 'node_types': ('t1',), 'topology': 'KK_Aarnet'}}}, 'repetition': 0, 'maxrepetition': 1}, {'request_generation': {'exponential': {'ExponentialRequestGenerator': {'edge_resource_factor': 100, 'max_number_of_nodes': 4, 'min_number_of_nodes': 2, 'node_resource_factor': 0.1, 'normalize': False, 'number_of_requests': 4, 'probability': 0.8}}}, 'substrate_generation': {'substrates': {'TopologyZooReader': {'edge_capacity': 100.0, 'node_capacity': 100.0, 'node_cost_factor': 1.0, 'node_type_distribution': 0.3, 'node_types': ('t2',), 'topology': 'KK_Aarnet'}}}, 'repetition': 0, 'maxrepetition': 1}]
   request_generation:
    {'exponential': {'ExponentialRequestGenerator': {'edge_resource_factor': 100, 'max_number_of_nodes': 4, 'min_number_of_nodes': 2, 'node_resource_factor': 0.1, 'normalize': False, 'number_of_requests': 4, 'probability': 0.8}}}
   substrate_generation:
    {'substrates': {'TopologyZooReader': {'edge_capacity': 100.0, 'node_capacity': 100.0, 'node_cost_factor': 1.0, 'node_type_distribution': 0.3, 'node_types': ('t1',), 'topology': 'KK_Aarnet'}}}
   repetition: 0
   maxrepetition: 1
   request_generation:
    {'exponential': {'ExponentialRequestGenerator': {'edge_resource_factor': 100, 'max_number_of_nodes': 4, 'min_number_of_nodes': 2, 'node_resource_factor': 0.1, 'normalize': False, 'number_of_requests': 4, 'probability': 0.8}}}
   substrate_generation:
    {'substrates': {'TopologyZooReader': {'edge_capacity': 100.0, 'node_capacity': 100.0, 'node_cost_factor': 1.0, 'node_type_distribution': 0.3, 'node_types': ('t2',), 'topology': 'KK_Aarnet'}}}
   repetition: 0
   maxrepetition: 1

 scenario_parameter_dict:
  substrate_generation:
   {'substrates': {'all': {0, 1}, 'TopologyZooReader': {'edge_capacity': {100.0: {0, 1}}, 'node_capacity': {100.0: {0, 1}}, 'node_cost_factor': {1.0: {0, 1}}, 'node_type_distribution': {0.3: {0, 1}}, 'node_types': {('t1',): {0}, ('t2',): {1}}, 'topology': {'KK_Aarnet': {0, 1}}}}}
  request_generation:
   {'exponential': {'all': {0, 1}, 'ExponentialRequestGenerator': {'edge_resource_factor': {100: {0, 1}}, 'max_number_of_nodes': {4: {0, 1}}, 'min_number_of_nodes': {2: {0, 1}}, 'node_resource_factor': {0.1: {0, 1}}, 'normalize': {False: {0, 1}}, 'number_of_requests': {4: {0, 1}}, 'probability': {0.8: {0, 1}}}}}
  profit_calculation:
   {}
  node_placement_restriction_mapping:
   {}

 scenario_triple:
  0:
   ({'request_generation': {'exponential': {'ExponentialRequestGenerator': {'edge_resource_factor': 100, 'max_number_of_nodes': 4, 'min_number_of_nodes': 2, 'node_resource_factor': 0.1, 'normalize': False, 'number_of_requests': 4, 'probability': 0.8}}}, 'substrate_generation': {'substrates': {'TopologyZooReader': {'edge_capacity': 100.0, 'node_capacity': 100.0, 'node_cost_factor': 1.0, 'node_type_distribution': 0.3, 'node_types': ('t1',), 'topology': 'KK_Aarnet'}}}, 'repetition': 0, 'maxrepetition': 1}, <alib.datamodel.Scenario object at 0x00000187077FAA90>)
    request_generation:
     {'exponential': {'ExponentialRequestGenerator': {'edge_resource_factor': 100, 'max_number_of_nodes': 4, 'min_number_of_nodes': 2, 'node_resource_factor': 0.1, 'normalize': False, 'number_of_requests': 4, 'probability': 0.8}}}
    substrate_generation:
     {'substrates': {'TopologyZooReader': {'edge_capacity': 100.0, 'node_capacity': 100.0, 'node_cost_factor': 1.0, 'node_type_distribution': 0.3, 'node_types': ('t1',), 'topology': 'KK_Aarnet'}}}
    repetition: 0
    maxrepetition: 1
   alib.datamodel.Scenario @ 0x187077faa90
    name: scenario_0.0_rep_0
    objective: 0
    requests:
     [<alib.datamodel.Request object at 0x00000187077FAAF0>, <alib.datamodel.Request object at 0x00000187077FAB80>, <alib.datamodel.Request object at 0x00000187077FAA00>, <alib.datamodel.Request object at 0x00000187077FAB50>]
     alib.datamodel.Request @ 0x187077faaf0
      _shortest_paths_attribute_identifier: cost
      edge:
       ('2', '1'):
        demand: 0.051539068513570936
        allowed_edges: None
       ('1', '2'):
        demand: 0.051539068513570936
        allowed_edges: None
       ('1', '3'):
        demand: 0.051539068513570936
        allowed_edges: None
       ('3', '2'):
        demand: 0.051539068513570936
        allowed_edges: None
       ('3', '1'):
        demand: 0.051539068513570936
        allowed_edges: None
      edges:
       {('3', '2'), ('3', '1'), ('1', '3'), ('1', '2'), ('2', '1')}
        ('3', '2')
        ('3', '1')
        ('1', '3')
        ('1', '2')
        ('2', '1')
      graph:
        empty dict
      in_edges:
       1:
        [('2', '1'), ('3', '1')]
         ('2', '1')
         ('3', '1')
       2:
        [('1', '2'), ('3', '2')]
         ('1', '2')
         ('3', '2')
       3:
        [('1', '3')]
      in_neighbors:
       1:
        ['2', '3']
       2:
        ['1', '3']
       3:
        ['1']
      name: vnet_1
      node:
       1:
        demand: 0.3543310960308002
        allowed_nodes:
         ['5', '1']
        type: t1
       2:
        demand: 0.3543310960308002
        allowed_nodes:
         ['5', '1']
        type: t1
       3:
        demand: 0.3543310960308002
        allowed_nodes:
         ['5', '1']
        type: t1
      nodes:
       {'1', '3', '2'}
      out_edges:
       1:
        [('1', '2'), ('1', '3')]
         ('1', '2')
         ('1', '3')
       2:
        [('2', '1')]
       3:
        [('3', '2'), ('3', '1')]
         ('3', '2')
         ('3', '1')
      out_neighbors:
       1:
        ['2', '3']
       2:
        ['1']
       3:
        ['2', '1']
      profit: 0.0
      shortest_paths_costs: None
      types:
       {'t1'}
     alib.datamodel.Request @ 0x187077fab80
      _shortest_paths_attribute_identifier: cost
      edge:
        empty dict
      edges:
       set()
      graph:
        empty dict
      in_edges:
       1:
        []
       2:
        []
      in_neighbors:
       1:
        []
       2:
        []
      name: vnet_2
      node:
       1:
        demand: 1.6219147980755437
        allowed_nodes:
         ['5', '1']
        type: t1
       2:
        demand: 1.6219147980755437
        allowed_nodes:
         ['5', '1']
        type: t1
      nodes:
       {'1', '2'}
      out_edges:
       1:
        []
       2:
        []
      out_neighbors:
       1:
        []
       2:
        []
      profit: 0.0
      shortest_paths_costs: None
      types:
       {'t1'}
     alib.datamodel.Request @ 0x187077faa00
      _shortest_paths_attribute_identifier: cost
      edge:
       ('2', '3'):
        demand: 0.13958038696515526
        allowed_edges: None
       ('1', '2'):
        demand: 0.13958038696515526
        allowed_edges: None
       ('1', '3'):
        demand: 0.13958038696515526
        allowed_edges: None
       ('3', '2'):
        demand: 0.13958038696515526
        allowed_edges: None
       ('3', '1'):
        demand: 0.13958038696515526
        allowed_edges: None
      edges:
       {('3', '2'), ('2', '3'), ('3', '1'), ('1', '3'), ('1', '2')}
        ('3', '2')
        ('2', '3')
        ('3', '1')
        ('1', '3')
        ('1', '2')
      graph:
        empty dict
      in_edges:
       1:
        [('3', '1')]
       2:
        [('1', '2'), ('3', '2')]
         ('1', '2')
         ('3', '2')
       3:
        [('2', '3'), ('1', '3')]
         ('2', '3')
         ('1', '3')
      in_neighbors:
       1:
        ['3']
       2:
        ['1', '3']
       3:
        ['2', '1']
      name: vnet_3
      node:
       1:
        demand: 0.9596151603854427
        allowed_nodes:
         ['5', '1']
        type: t1
       2:
        demand: 0.9596151603854427
        allowed_nodes:
         ['5', '1']
        type: t1
       3:
        demand: 0.9596151603854427
        allowed_nodes:
         ['5', '1']
        type: t1
      nodes:
       {'1', '3', '2'}
      out_edges:
       1:
        [('1', '2'), ('1', '3')]
         ('1', '2')
         ('1', '3')
       2:
        [('2', '3')]
       3:
        [('3', '2'), ('3', '1')]
         ('3', '2')
         ('3', '1')
      out_neighbors:
       1:
        ['2', '3']
       2:
        ['3']
       3:
        ['2', '1']
      profit: 0.0
      shortest_paths_costs: None
      types:
       {'t1'}
     alib.datamodel.Request @ 0x187077fab50
      _shortest_paths_attribute_identifier: cost
      edge:
       ('1', '2'):
        demand: 0.37303914532368304
        allowed_edges: None
      edges:
       {('1', '2')}
        ('1', '2')
      graph:
        empty dict
      in_edges:
       1:
        []
       2:
        [('1', '2')]
      in_neighbors:
       1:
        []
       2:
        ['1']
      name: vnet_4
      node:
       1:
        demand: 2.564644124100321
        allowed_nodes:
         ['5', '1']
        type: t1
       2:
        demand: 2.564644124100321
        allowed_nodes:
         ['5', '1']
        type: t1
      nodes:
       {'1', '2'}
      out_edges:
       1:
        [('1', '2')]
       2:
        []
      out_neighbors:
       1:
        ['2']
       2:
        []
      profit: 0.0
      shortest_paths_costs: None
      types:
       {'t1'}
    substrate: Substrate KK_Aarnet with following attributes: 
		Nodes{'4', '0', '5', '3', '1', '6', '2'}
		Edges{('4', '3'), ('4', '2'), ('0', '3'), ('0', '1'), ('2', '4'), ('3', '1'), ('5', '4'), ('6', '5'), ('1', '3'), ('3', '0'), ('4', '5'), ('2', '0'), ('5', '6'), ('0', '2'), ('1', '0'), ('3', '4')}
  1:
   ({'request_generation': {'exponential': {'ExponentialRequestGenerator': {'edge_resource_factor': 100, 'max_number_of_nodes': 4, 'min_number_of_nodes': 2, 'node_resource_factor': 0.1, 'normalize': False, 'number_of_requests': 4, 'probability': 0.8}}}, 'substrate_generation': {'substrates': {'TopologyZooReader': {'edge_capacity': 100.0, 'node_capacity': 100.0, 'node_cost_factor': 1.0, 'node_type_distribution': 0.3, 'node_types': ('t2',), 'topology': 'KK_Aarnet'}}}, 'repetition': 0, 'maxrepetition': 1}, <alib.datamodel.Scenario object at 0x00000187077FAD90>)
    request_generation:
     {'exponential': {'ExponentialRequestGenerator': {'edge_resource_factor': 100, 'max_number_of_nodes': 4, 'min_number_of_nodes': 2, 'node_resource_factor': 0.1, 'normalize': False, 'number_of_requests': 4, 'probability': 0.8}}}
    substrate_generation:
     {'substrates': {'TopologyZooReader': {'edge_capacity': 100.0, 'node_capacity': 100.0, 'node_cost_factor': 1.0, 'node_type_distribution': 0.3, 'node_types': ('t2',), 'topology': 'KK_Aarnet'}}}
    repetition: 0
    maxrepetition: 1
   alib.datamodel.Scenario @ 0x187077fad90
    name: scenario_1.0_rep_0
    objective: 0
    requests:
     [<alib.datamodel.Request object at 0x00000187077FADC0>, <alib.datamodel.Request object at 0x00000187077FACD0>, <alib.datamodel.Request object at 0x00000187077FAD30>, <alib.datamodel.Request object at 0x00000187077FAD60>]
     alib.datamodel.Request @ 0x187077fadc0
      _shortest_paths_attribute_identifier: cost
      edge:
       ('2', '1'):
        demand: 0.3670346122615578
        allowed_edges: None
       ('2', '3'):
        demand: 0.3670346122615578
        allowed_edges: None
       ('1', '3'):
        demand: 0.3670346122615578
        allowed_edges: None
       ('3', '2'):
        demand: 0.3670346122615578
        allowed_edges: None
       ('3', '1'):
        demand: 0.3670346122615578
        allowed_edges: None
      edges:
       {('3', '2'), ('2', '3'), ('3', '1'), ('1', '3'), ('2', '1')}
        ('3', '2')
        ('2', '3')
        ('3', '1')
        ('1', '3')
        ('2', '1')
      graph:
        empty dict
      in_edges:
       1:
        [('2', '1'), ('3', '1')]
         ('2', '1')
         ('3', '1')
       2:
        [('3', '2')]
       3:
        [('2', '3'), ('1', '3')]
         ('2', '3')
         ('1', '3')
      in_neighbors:
       1:
        ['2', '3']
       2:
        ['3']
       3:
        ['2', '1']
      name: vnet_1
      node:
       1:
        demand: 2.5233629592982103
        allowed_nodes:
         ['6', '0']
        type: t2
       2:
        demand: 2.5233629592982103
        allowed_nodes:
         ['6', '0']
        type: t2
       3:
        demand: 2.5233629592982103
        allowed_nodes:
         ['6', '0']
        type: t2
      nodes:
       {'1', '3', '2'}
      out_edges:
       1:
        [('1', '3')]
       2:
        [('2', '1'), ('2', '3')]
         ('2', '1')
         ('2', '3')
       3:
        [('3', '2'), ('3', '1')]
         ('3', '2')
         ('3', '1')
      out_neighbors:
       1:
        ['3']
       2:
        ['1', '3']
       3:
        ['2', '1']
      profit: 0.0
      shortest_paths_costs: None
      types:
       {'t2'}
     alib.datamodel.Request @ 0x187077facd0
      _shortest_paths_attribute_identifier: cost
      edge:
       ('2', '1'):
        demand: 0.0771560195208718
        allowed_edges: None
      edges:
       {('2', '1')}
        ('2', '1')
      graph:
        empty dict
      in_edges:
       1:
        [('2', '1')]
       2:
        []
      in_neighbors:
       1:
        ['2']
       2:
        []
      name: vnet_2
      node:
       1:
        demand: 0.5304476342059936
        allowed_nodes:
         ['6', '0']
        type: t2
       2:
        demand: 0.5304476342059936
        allowed_nodes:
         ['6', '0']
        type: t2
      nodes:
       {'1', '2'}
      out_edges:
       1:
        []
       2:
        [('2', '1')]
      out_neighbors:
       1:
        []
       2:
        ['1']
      profit: 0.0
      shortest_paths_costs: None
      types:
       {'t2'}
     alib.datamodel.Request @ 0x187077fad30
      _shortest_paths_attribute_identifier: cost
      edge:
       ('2', '4'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('2', '1'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('2', '3'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('4', '2'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('4', '1'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('4', '3'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('1', '2'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('1', '4'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('1', '3'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('3', '4'):
        demand: 0.07844977664530797
        allowed_edges: None
       ('3', '1'):
        demand: 0.07844977664530797
        allowed_edges: None
      edges:
       {('4', '3'), ('4', '2'), ('1', '4'), ('2', '3'), ('2', '4'), ('3', '1'), ('1', '3'), ('4', '1'), ('1', '2'), ('2', '1'), ('3', '4')}
        ('4', '3')
        ('4', '2')
        ('1', '4')
        ('2', '3')
        ('2', '4')
        ('3', '1')
        ('1', '3')
        ('4', '1')
        ('1', '2')
        ('2', '1')
        ('3', '4')
      graph:
        empty dict
      in_edges:
       1:
        [('2', '1'), ('4', '1'), ('3', '1')]
         ('2', '1')
         ('4', '1')
         ('3', '1')
       2:
        [('4', '2'), ('1', '2')]
         ('4', '2')
         ('1', '2')
       3:
        [('2', '3'), ('4', '3'), ('1', '3')]
         ('2', '3')
         ('4', '3')
         ('1', '3')
       4:
        [('2', '4'), ('1', '4'), ('3', '4')]
         ('2', '4')
         ('1', '4')
         ('3', '4')
      in_neighbors:
       1:
        ['2', '4', '3']
       2:
        ['4', '1']
       3:
        ['2', '4', '1']
       4:
        ['2', '1', '3']
      name: vnet_3
      node:
       1:
        demand: 0.5393422144364924
        allowed_nodes:
         ['6', '0']
        type: t2
       2:
        demand: 0.5393422144364924
        allowed_nodes:
         ['6', '0']
        type: t2
       3:
        demand: 0.5393422144364924
        allowed_nodes:
         ['6', '0']
        type: t2
       4:
        demand: 0.5393422144364924
        allowed_nodes:
         ['6', '0']
        type: t2
      nodes:
       {'4', '3', '1', '2'}
      out_edges:
       1:
        [('1', '2'), ('1', '4'), ('1', '3')]
         ('1', '2')
         ('1', '4')
         ('1', '3')
       2:
        [('2', '4'), ('2', '1'), ('2', '3')]
         ('2', '4')
         ('2', '1')
         ('2', '3')
       3:
        [('3', '4'), ('3', '1')]
         ('3', '4')
         ('3', '1')
       4:
        [('4', '2'), ('4', '1'), ('4', '3')]
         ('4', '2')
         ('4', '1')
         ('4', '3')
      out_neighbors:
       1:
        ['2', '4', '3']
       2:
        ['4', '1', '3']
       3:
        ['4', '1']
       4:
        ['2', '1', '3']
      profit: 0.0
      shortest_paths_costs: None
      types:
       {'t2'}
     alib.datamodel.Request @ 0x187077fad60
      _shortest_paths_attribute_identifier: cost
      edge:
       ('2', '1'):
        demand: 0.3924467608659478
        allowed_edges: None
       ('1', '2'):
        demand: 0.3924467608659478
        allowed_edges: None
      edges:
       {('2', '1'), ('1', '2')}
        ('2', '1')
        ('1', '2')
      graph:
        empty dict
      in_edges:
       1:
        [('2', '1')]
       2:
        [('1', '2')]
      in_neighbors:
       1:
        ['2']
       2:
        ['1']
      name: vnet_4
      node:
       1:
        demand: 2.698071480953392
        allowed_nodes:
         ['6', '0']
        type: t2
       2:
        demand: 2.698071480953392
        allowed_nodes:
         ['6', '0']
        type: t2
      nodes:
       {'1', '2'}
      out_edges:
       1:
        [('1', '2')]
       2:
        [('2', '1')]
      out_neighbors:
       1:
        ['2']
       2:
        ['1']
      profit: 0.0
      shortest_paths_costs: None
      types:
       {'t2'}
    substrate: Substrate KK_Aarnet with following attributes: 
		Nodes{'4', '0', '5', '3', '1', '6', '2'}
		Edges{('4', '3'), ('4', '2'), ('0', '3'), ('0', '1'), ('2', '4'), ('3', '1'), ('5', '4'), ('6', '5'), ('1', '3'), ('3', '0'), ('4', '5'), ('2', '0'), ('5', '6'), ('0', '2'), ('1', '0'), ('3', '4')}

 scenarioparameter_room:
  request_generation:
   [{'exponential': {'ExponentialRequestGenerator': {'number_of_requests': [4], 'min_number_of_nodes': [2], 'max_number_of_nodes': [4], 'probability': [0.8], 'node_resource_factor': [0.1], 'edge_resource_factor': [100], 'normalize': [False]}}}]
  substrate_generation:
   [{'substrates': {'TopologyZooReader': {'topology': ['KK_Aarnet'], 'node_types': [('t1',), ('t2',)], 'node_capacity': [100.0], 'node_cost_factor': [1.0], 'edge_capacity': [100.0], 'node_type_distribution': [0.3]}}}]

